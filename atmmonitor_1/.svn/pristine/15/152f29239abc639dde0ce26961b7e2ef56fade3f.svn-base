<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-3.0.xsd
http://www.springframework.org/schema/context 
http://www.springframework.org/schema/context/spring-context-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">
   
    <context:property-placeholder location="classpath:security.properties" />
   	<context:component-scan base-package="com" >
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan> 
	<!-- 配置数据源 -->
	<bean name="dataSource_mb" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

<!-- 		初始化连接大小 -->
		<property name="initialSize" value="5" />
<!-- 		连接池最大使用连接数量 -->
		<property name="maxActive" value="50" />

<!-- 		连接池最小空闲 -->
		<property name="minIdle" value="1" />
<!-- 		获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />

<!-- 		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
<!-- 		配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

<!-- 		打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
<!-- 		1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
<!-- 		关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

<!-- 		监控数据库 -->
		<property name="filters" value="stat" />
		 <property name="defaultAutoCommit" value="false"/>
		
	</bean>
	

	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_mb" />
		
		<property name="configLocation" value="classpath:spring/MyBatisConfiguration.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/example/mapping/*.xml</value>
				<value>classpath:com/inspection/basedata/mapping/*.xml</value>
				<value>classpath:com/equipment/dao/mapping/*.xml</value>
			</list>
		</property>
	</bean>
	
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
        
    </bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.example.**.dao,com.inspection.**.dao,com.equipment.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="transactionManager" name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource_mb" />
		</property>
	</bean>
    <tx:annotation-driven transaction-manager="transactionManager" />
<!-- 	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" /> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
<!-- 	<aop:config proxy-target-class="true"> -->
<!-- 		<aop:pointcut id="transactionPointcut" -->
<!-- 			expression="execution(* com.**.manager.*.*(..))" /> -->
<!-- 		<aop:advisor pointcut-ref="transactionPointcut" -->
<!-- 			advice-ref="transactionAdvice" /> -->
<!-- 	</aop:config> -->
	
</beans>